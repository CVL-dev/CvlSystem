#!/bin/sh
#
# CVL VNC session
#

ARG0=`basename $0`
Geometry="1440x900"
Depth="24"
DefaultDisplay="1"
#Display="${DefaultDisplay}"
#VncServer="tigervnc"
VncServer="turbovnc"
MODULE=`echo $MODULEPATH`

if [ -z "${MODULE}" ]; then
    source /etc/profile.d/modules.sh    
fi

if [ ! -d "/usr/local/tigervnc" ]; then
    VncServer="turbovnc"
fi

module load libjpeg-turbo
#module load turbovnc

function Usage()
{
    echo "Usage: "
    echo "${ARG0} - Start VNC session using default configuration."
    echo "${ARG0} --geometry <geometry_value> --display <display_number> --vnc <tigervnc|turbovnc> - Start VNC session using user configuration"
    echo "${ARG0} stop <display_number> - Stop VNC session"
}

USERHOME=`echo ~`
VNCHOME="${USERHOME}/.vnc"
LOG="${VNCHOME}/cvlvnclog.txt"

if [ ! -d "${USERHOME}" ]; then
    exit 1
fi

function Log()
{
    message=$1
    echo "`date`: ${message}" >> ${LOG} 
}

function SetVnc()
{
    vnc=$1

    if [ "${vnc}" == "tigervnc" ]; then 
        Log "Error: tigervnc is not supported, switch to turbovnc"
        VncServer=turbovnc
#        if [ -d "/usr/local/tigervnc" ]; then
#            VncServer=${vnc}
#        else
#            Log "Error: tigervnc is not installed"
#        fi
    elif [ "${vnc}" == "turbovnc" ]; then
        VncServer=${vnc}
    else
        Log "Error: ${vnc} is not a valid name"
    fi
}

VNCHOME=`echo ~/.vnc`

function CreateVncPassword()
{
    UserName=$1
    Password=$2
    
    if [ ! -d ${VNCHOME} ]; then
        mkdir ${VNCHOME}
    fi

    module load ${VncServer}

    echo ${Password} | vncpasswd -f ${UserName} --stdin > ${VNCHOME}/passwd
    Log "Create ${UserName} VNC password"
}

function VncPassword()
{
    UserName=$1
    Password=$2
   
    if [[ ${UserName} == "" || ${Password} == "" ]]; then
        Log "Error: ${UserName} password is not valid"
        exit 1
    fi

    if [ $( id -u ) -eq 0 ]; then
        USERHOME=`su ${UserName} -c "echo ~"`
        VNCHOME="${USERHOME}/.vnc"
        LOG="${VNCHOME}/cvlvnclog.txt"
        if [ ! -d ${VNCHOME} ]; then
            su ${UserName} -c "mkdir ${VNCHOME}"
        fi
        su ${UserName} -c "module load ${VncServer}; echo ${Password} | vncpasswd -f ${UserName} --stdin > ${VNCHOME}/passwd; chmod 600 ${VNCHOME}/passwd; echo `date`: Create ${UserName} VNC password >> ${LOG}" 
    else
        CreateVncPassword ${UserName} ${Password}
    fi
}

function List()
{
    module load ${VncServer}

    vncserver -list
}

function Stop()
{
    module load ${VncServer}

    if [ -z ${Display} ]; then
        Display="${DefaultDisplay}"
    fi

    vncserver -kill :${Display}
}

function Start()
{
    if [ -z "${Display}" ]; then
        vncserver -geometry ${Geometry} -depth ${Depth}
    else
        vncserver -geometry ${Geometry} -depth ${Depth} :${Display}
    fi
}

function Initialisation()
{
    if [ ! -d ${HOME}/.config/xfce4 ]; then
        mkdir -p ${HOME}/.config/xfce4
    fi

    module load turbovnc

    CONFIG_PREFIX=`which vncserver | sed "s/\/bin\/vncserver//g"`
    CONFIG_LIB="${CONFIG_PREFIX}/config"

    if [ ! -d ${HOME}/.config/xfce4/xfconf ]; then
        cp -r ${CONFIG_LIB}/xfce4 ${HOME}/.config
    fi

    if [ ${VncServer}="tigervnc" ]; then
        Log "TigerVNC is not supported"
#        if [ ! -d ${HOME}/.vnc ]; then
#            mkdir ${HOME}/.vnc
#        fi
#        if [ ! -f ${HOME}/.vnc/xstartup ]; then
#            cp ${CONFIG_LIB}/xstartup.thunar ${HOME}/.vnc/xstartup
#            cp ${CONFIG_LIB}/%gconf.xml ${HOME}/.gconf/apps
#        fi
    fi
    
    module unload turbovnc
}

while [ $# -ge 1 ]; do
    case "$1" in
        -d|--display)
            Display=$2
            ;;
        -g|--geometry)
            Geometry=$2
            ;;
        -h|--help)
            Usage
            exit 0
            ;;
        -l|--list)
            List
            exit 0
            ;;
        -p|--password)
            VncPassword $2 $3 
            exit 0
            ;;
        -s|stop)
            Display=$2
            Stop
            exit 0
            ;;
        -v|--vnc)
            SetVnc $2
            ;;
    esac
    shift
done

Initialisation
module load ${VncServer} 
Start

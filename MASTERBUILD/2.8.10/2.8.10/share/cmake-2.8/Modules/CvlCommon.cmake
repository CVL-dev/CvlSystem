macro(CurrentDirectoryName MyDirectoryName)
    exec_program(basename ARGS ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE ${MyDirectoryName})
endmacro(CurrentDirectoryName)

function(IsExecutableFile path executableFile)
#    execute_process(COMMAND ls -l ${path} | awk '{ print $1 }' | grep x OUTPUT_VARIABLE f)
    exec_program(ls ARGS -l ${path} | awk '{ print $1 }' | grep 'x' OUTPUT_VARIABLE f)

    if(f)
        set(${executableFile} "ON" PARENT_SCOPE)
    else()
        set(${executableFile} "OFF" PARENT_SCOPE)
    endif()
endfunction(IsExecutableFile)

function(GetDirectoryName path directory)
    execute_process(COMMAND dirname ${path} OUTPUT_VARIABLE d)
    string(STRIP ${d} d)
    set(${directory} ${d} PARENT_SCOPE) 
endfunction(GetDirectoryName)

function(GetFilename path name)
    execute_process(COMMAND basename ${path} OUTPUT_VARIABLE n)
    string(STRIP ${n} n)
    set(${name} ${n} PARENT_SCOPE) 
endfunction(GetFilename)

macro(ListSubDirectory path var)
    exec_program(ls ARGS -l ${CMAKE_CURRENT_SOURCE_DIR}/${path} | awk ' /^d/ {print $9}' | grep -v 'Test' OUTPUT_VARIABLE ${var})
endmacro(ListSubDirectory)

macro(GetSourceConfigure var tarFile tarCompress type)
    exec_program(tar ARGS ${tarCompress}tf ${CMAKE_CURRENT_SOURCE_DIR}/${tarFile} | grep -e /${type}$ | sort OUTPUT_VARIABLE ${var})
endmacro(GetSourceConfigure)

#macro(GetSourceDirectory var tarFile tarCompress)
#    exec_program(tar ARGS ${tarCompress}tf ${CMAKE_CURRENT_SOURCE_DIR}/${tarFile} | sort | grep '/$' -m 1 OUTPUT_VARIABLE ${var})
#endmacro(GetSourceDirectory)

macro(GetTarball var)
    exec_program(ls ARGS ${CMAKE_CURRENT_SOURCE_DIR} | egrep -e 'bz2|gz' OUTPUT_VARIABLE  ${var})
endmacro(GetTarball)

macro(CAR var)
    set(${var} ${ARGV1})
endmacro(CAR)

macro(CDR var junk)
    set(${var} ${ARGN})
endmacro(CDR)

macro(ListIndex var index)
    set(list . ${ARGN})
    foreach(i RANGE 1 ${index})
        CDR(list ${list})
    endforeach(i)
    CAR(${var} ${list})
endmacro(ListIndex)

function(ListDirectory path var)
    ListSubDirectory(${path} Subdirectory)
    if(Subdirectory AND NOT Subdirectory STREQUAL " ")
        string(REPLACE "\n" ";" MyList ${Subdirectory})
        set(${var} ${MyList} PARENT_SCOPE)
    else()
        message(FATAL_ERROR "Invalid parent directory ${path}")
    endif()
endfunction(ListDirectory)

function(GetDistribution var)
    set(MySystem ${CMAKE_SYSTEM})
    string(REPLACE "." ";" StringList ${MySystem})
    list(LENGTH StringList SystemLength)
    set(${var} "unknown" PARENT_SCOPE)
    foreach(os in ${StringList})
        # We only make it for redhat and debin at this stage.
        if((${os} MATCHES "^el[0-9]") OR (${os} MATCHES "^debian[0-9]"))
            set(${var} ${os} PARENT_SCOPE)
            break()
        endif()
    endforeach()
endfunction(GetDistribution)

function(GetConfigureSource source tarball compression type)
    set(${source} "Unknown")
    GetSourceConfigure(SourceConfigure ${tarball} ${compression} ${type}) 
    string(REPLACE "\n" ";" FileList ${SourceConfigure})
    list(LENGTH FileList SourceConfigureLength)
    if(SourceConfigureLength GREATER 1)
        ListIndex(MySource 1 ${FileList})
    elseif(SourceConfigureLength EQUAL 1)
        set(MySource ${SourceConfigure})
    endif()
    set(${source} ${MySource} PARENT_SCOPE)
endfunction(GetConfigureSource)    

function(GetCmakeConfigSourceDirectory source tarball compression)
    exec_program(tar ARGS ${compression}tf ${CMAKE_CURRENT_SOURCE_DIR}/${tarball} | grep -e /CMakeLists.txt$ | sort OUTPUT_VARIABLE SourceDirectory)
    string(REPLACE "\n" ";" FileList ${SourceDirectory})
    list(LENGTH FileList SourceConfigureLength)
    if(SourceConfigureLength GREATER 1)
        ListIndex(MySource 1 ${FileList})
        string(LENGTH ${MySource} ParentSourceLength)
        string(REPLACE "/" ";" StringList ${MySource})
        list(LENGTH StringList StringListLength)
        ListIndex(LastFileName ${StringListLength} ${StringList})
        string(LENGTH ${LastFileName} LastFileNameLength)
        math(EXPR SubLength "${ParentSourceLength} - ${LastFileNameLength} - 2")
        string(SUBSTRING ${MySource} 1 ${SubLength} MyDirctory)
        set(${source} ${MyDirctory} PARENT_SCOPE)
    endif()
endfunction(GetCmakeConfigSourceDirectory)    

function(SetString outputString inputString)
    if(inputString STREQUAL " ")
        message(FATAL_ERROR "Error: invalid CONFIGURE value in config file")
    else()
        string(STRIP ${inputString} stripInputString)
        set(${outputString} ${stripInputString} PARENT_SCOPE)
    endif() 
endfunction(SetString)

function(GetConfigParameter configName buildInSource packageRelease requestBuild requestPackage)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --type | tr '\n' ' ' OUTPUT_VARIABLE name) 

    if(NOT name)
        message(FATAL_ERROR "Error in config file")
    endif()

    # Cannot use function or macro to check empty string.
    if(name STREQUAL "")
        message(FATAL_ERROR "Error: invalid value in config file")
    endif()

    SetString(validate ${name})
    set(${configName} ${validate} PARENT_SCOPE)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --use-source-directory | tr '\n' ' ' OUTPUT_VARIABLE inSource) 
    if(inSource STREQUAL "")
        message(FATAL_ERROR "Error: invalid value in config file")
    endif()
    SetString(validate ${inSource})
    set(${buildInSource} ${validate} PARENT_SCOPE) 
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --release | tr '\n' ' ' OUTPUT_VARIABLE releaseNumber) 
    if(releaseNumber STREQUAL "")
        message(FATAL_ERROR "Error: invalid value in config file")
    endif()
    SetString(validate ${releaseNumber})
    set(${packageRelease} ${validate} PARENT_SCOPE)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --build | tr '\n' ' ' OUTPUT_VARIABLE buildRequest) 
    if(buildRequest STREQUAL "")
        message(FATAL_ERROR "Error: invalid value in config file")
    endif()
    SetString(validate ${buildRequest})
    set(${requestBuild} ${validate} PARENT_SCOPE)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --package | tr '\n' ' ' OUTPUT_VARIABLE packageRequest) 
    if(packageRequest STREQUAL "")
        message(FATAL_ERROR "Error: invalid value in config file")
    endif()
    SetString(validate ${packageRequest})
    set(${requestPackage} ${validate} PARENT_SCOPE)
endfunction(GetConfigParameter)

function(GetSourceDirectory sourceDirectory tarFile tarCompress configFile)
    exec_program(tar ARGS ${tarCompress}tf ${CMAKE_CURRENT_SOURCE_DIR}/${tarFile} | perl -lne 'print tr:/::, \" $_\"' | sort -n | cut -d' ' -f2 | grep '${configFile}$' -m 1 OUTPUT_VARIABLE directoryWithFile)
    execute_process(COMMAND dirname ${directoryWithFile} OUTPUT_VARIABLE directoryName)
    if(NOT directoryName)
        message(FATAL_ERROR "Error: invalid value in config file")
    endif()
    SetString(validate ${directoryName})
    set(${sourceDirectory} ${validate} PARENT_SCOPE)
endfunction(GetSourceDirectory)

#function(WriteModuleFile directory base version versionNumber)
#   execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --module-file ${CMAKE_BINARY_DIR}/modulefiles/${directory} ${base} ${version} ${versionNumber})
#endfunction(WriteModuleFile)

function(AppendFile path contentList)
    foreach(content IN LISTS contentList)
        string(STRIP ${content} content)
        file(APPEND ${path} "${content}\n")
    endforeach()
endfunction(AppendFile)

#function(WriteModuleFile directory base version versionNumber)
#    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --environment-module-list OUTPUT_VARIABLE moduleList)
    
#    file(WRITE ${CMAKE_BINARY_DIR}/modulefiles/${directory}/${versionNumber} ${base})
    
#    if(moduleList)
#        AppendFile(${CMAKE_BINARY_DIR}/modulefiles/${directory}/${versionNumber} "${moduleList}")
#    endif()

#    set(baseFile "${CMAKE_BINARY_DIR}/modulefiles/${directory}/.base")
#    if(NOT EXISTS baseFile)
#        file(WRITE ${baseFile} ${base})
#        if(moduleList)
#            AppendFile(${baseFile} "${moduleList}")
#        endif()
#    endif()

#    set(versionFile "${CMAKE_BINARY_DIR}/modulefiles/${directory}/.version")
#    if (NOT EXISTS versionFile)
#        file(WRITE ${versionFile} ${version})
#        file(APPEND ${versionFile} ${versionNumber})
#    endif()
#    set(descriptionFile "${CMAKE_BINARY_DIR}/modulefiles/${directory}/.desc")
#    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --description OUTPUT_VARIABLE description)
#    if(NOT EXISTS descriptionFile)
#        file(WRITE ${descriptionFile} ${description})
#    endif()
#endfunction(WriteModuleFile)

function(WriteModuleFile directory base versionNumber)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --environment-module-list OUTPUT_VARIABLE moduleList)
    
    file(WRITE ${CMAKE_BINARY_DIR}/modulefiles/${directory}/${versionNumber} ${base})
    
    if(moduleList)
        AppendFile(${CMAKE_BINARY_DIR}/modulefiles/${directory}/${versionNumber} "${moduleList}")
    endif()

endfunction(WriteModuleFile)

function(SetModuleDescription description)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --description OUTPUT_VARIABLE d)
    set(${description} ${d} PARENT_SCOPE)
endfunction(SetModuleDescription)

#function(WriteTopMenuFile data filename)
#    file(WRITE ${filename} ${data})
#   execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config -u ${CMAKE_BINARY_DIR}/menu ${fileName})
#endfunction(WriteTopMenuFile)

function(InstallationExcludeDirectory exclude)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --exclude-install-directory OUTPUT_VARIABLE e)
    if(e)
        string(REPLACE ":" ";" excludeList ${e})
        foreach(d IN LISTS excludeList)
            set(excludeDirectory "PATTERN \"${d}\" EXCLUDE ")
            list(APPEND excludeDirectoryList ${excludeDirectory})
        endforeach()
        set(${exclude} ${excludeDirectoryList} PARENT_SCOPE)
    endif()
endfunction(InstallationExcludeDirectory)

#function(WriteSubmenuFile fileName)
#   execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config -v ${CMAKE_BINARY_DIR}/menu/submenu ${fileName})
#endfunction(WriteSubmenuFile)

#function(WriteDirectoryFile fileName)
#   execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config -w ${CMAKE_BINARY_DIR}/menu/directory ${fileName})
#endfunction(WriteDirectoryFile)

#function(WriteDesktopFile fileName)
#   execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config -x ${CMAKE_BINARY_DIR}/menu/application ${fileName})
#endfunction(WriteDesktopFile)

#function(WriteModuleFile directory base version versionNumber)
#    file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/modulefiles/${directory})
#    execute_process(COMMAND cat ${base} > ${CMAKE_BINARY_DIR}/modulefiles/${directory}/.base) 
#    execute_process(COMMAND cat ${version} ${versionNumber} > ${CMAKE_BINARY_DIR}/modulefiles/${directory}/.version)
#    execute_process(COMMAND ln -s .base ${CMAKE_BINARY_DIR}/modulefiles/${directory}/${versionNumber}) 
#endfunction(WriteModuleFile)

function(SetList sourceList destinationList fileList)
    if(NOT fileList STREQUAL " " AND NOT fileList STREQUAL "")
        foreach(f IN LISTS fileList)
            string(REPLACE ":" ";" stringList ${f}) 
            ListIndex(s 1 ${stringList})
            ListIndex(d 2 ${stringList})
            list(APPEND mySourceList ${s})
            list(APPEND myDestinationList ${d})
        endforeach()
        set(${sourceList} ${mySourceList} PARENT_SCOPE) 
        set(${destinationList} ${myDestinationList} PARENT_SCOPE) 
    endif()
endfunction(SetList)

function(GetInstallDirectory source destination)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --install-directory OUTPUT_VARIABLE directory)
    if(NOT directory STREQUAL "")
        string(REPLACE ":" ";" directoryList ${directory})
        list(LENGTH directoryList listLength)
        list(GET directoryList 0 s)
        list(GET directoryList 1 d)
        set(${source} ${s} PARENT_SCOPE) 
        set(${destination} ${d} PARENT_SCOPE) 
    endif()
endfunction(GetInstallDirectory)

function(InstallConfigFileList sourceList destinationList)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --file-installation-list OUTPUT_VARIABLE myList)
    if(NOT myList STREQUAL " " AND NOT myList STREQUAL "")
        SetList(mySourceList myDestinationList "${myList}")
        set(${sourceList} ${mySourceList} PARENT_SCOPE) 
        set(${destinationList} ${myDestinationList} PARENT_SCOPE) 
    endif()
endfunction(InstallConfigFileList)

function(InstallConfigDirectoryList sourceList destinationList)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --directory-installation-list OUTPUT_VARIABLE fileList)
    if(NOT fileList STREQUAL " " AND NOT fileList STREQUAL "")
        SetList(mySourceList myDestinationList ${fileList})
        set(${sourceList} ${mySourceList} PARENT_SCOPE) 
        set(${destinationList} ${myDestinationList} PARENT_SCOPE) 
    endif()
endfunction(InstallConfigDirectoryList)

function(GetModuleFileInstallationFlag flag)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --group-module-file-installation OUTPUT_VARIABLE moduleFlag)
    set(${flag} ${moduleFlag} PARENT_SCOPE) 
endfunction(GetModuleFileInstallationFlag)

function(ExtraInstallation type)
    if(type STREQUAL "FILES")
        InstallConfigFileList(sourceList destinationList)
    elseif(type STREQUAL "DIRECTORY")
        InstallConfigDirectoryList(sourceList destinationList)
    else()
        message(FATAL_ERROR "Wrong installation type ${type}")
    endif()

    if(sourceList AND NOT sourceList STREQUAL " ")
#        string(STRIP ${sourceList} sourceList)
        list(LENGTH sourceList count)
        set(index 0)
        while(${index} LESS ${count})
            list(GET sourceList ${index} s)
            string(STRIP ${s} s)
            list(GET destinationList ${index} d)
            string(STRIP ${d} d)
            
            # cmake bug, we have to manually check it.
            if(type STREQUAL "FILES")
                IsExecutableFile(${CMAKE_CURRENT_SOURCE_DIR}/${s} executable)
            endif()

            if(CvlEnableComponentPackage)
                if(executable)
                    install(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/${s} DESTINATION ${d} COMPONENT ${ModuleName})
                else()
                    install(${type} ${CMAKE_CURRENT_SOURCE_DIR}/${s} DESTINATION ${d} COMPONENT ${ModuleName})
                endif()
            else()
                if(executable)
                    # Install with executable permission
                    install(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/${s} DESTINATION ${d})
                else()
                    install(${type} ${CMAKE_CURRENT_SOURCE_DIR}/${s} DESTINATION ${d})
                endif()
            endif()
            math(EXPR index "${index} + 1")
        endwhile()
    endif()
endfunction(ExtraInstallation)

function(GetSourceBuildFlag flag)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --source-build-flag OUTPUT_VARIABLE f)
    set(${flag} ${f} PARENT_SCOPE) 
endfunction(GetSourceBuildFlag)

function(GetBuildCommand buildCommand)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --make-command OUTPUT_VARIABLE c)
    set(${buildCommand} ${c} PARENT_SCOPE) 
endfunction(GetBuildCommand)

function(GetInstallCommand installCommand)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --install-command OUTPUT_VARIABLE c)
    set(${installCommand} ${c} PARENT_SCOPE) 
endfunction(GetInstallCommand)

function(ConfigBinaryBuild sourceDirectory installDirectory)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --config ${sourceDirectory} ${installDirectory})
endfunction(ConfigBinaryBuild)

function(AddTest dir name)
    if(IS_DIRECTORY ${dir})
        execute_process(COMMAND find ${dir} -executable -type f OUTPUT_VARIABLE files)
        if(files AND NOT files STREQUAL "")
            string(REPLACE "\n" ";" fileList ${files})
            set(testCount 0)

            foreach(testFile ${fileList})

                math(EXPR testCount "${testCount} + 1")

                if(BUILD_TESTING)
                    add_test(${name}${testCount} ${testFile})
                endif()
            endforeach()
        endif()
    endif()
endfunction(AddTest)

function(GetMenuParameter menuType menuLayout menuDirectory menuDesktop)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --menu-layout | tr '\n' ' ' OUTPUT_VARIABLE layout) 

    if(layout AND NOT layout STREQUAL " ")

        string(REPLACE ":" ";" stringList ${layout})
        list(LENGTH stringList CheckLength)
        if(NOT CheckLength EQUAL 2)
            message(FATAL_ERROR "error: invalid MenuLayout value ${layout}")
        endif()
        list(GET stringList 0 type)
        list(GET stringList 1 subtype)

        if(type AND subtype)
            set(${menuType} ${type} PARENT_SCOPE)
            set(${menuLayout} ${subtype} PARENT_SCOPE)
            execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --menu-directory | tr '\n' ' ' OUTPUT_VARIABLE d) 
            set(${menuDirectory} ${d} PARENT_SCOPE)
            execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --menu-desktop | tr '\n' ' ' OUTPUT_VARIABLE desktop)
            set(${menuDesktop} ${desktop} PARENT_SCOPE)
        endif() 
    endif()
endfunction(GetMenuParameter)

function(GetLibraryDependencyList dependency)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --library-dependency | tr '\n' ' ' OUTPUT_VARIABLE d) 
    set(${dependency} ${d} PARENT_SCOPE)
endfunction(GetLibraryDependencyList)

function(ChangeFileAccessPermission fqpn permission)
    execute_process(COMMAND chmod ${permission} ${fqpn}) 
endfunction(ChangeFileAccessPermission)

function(PostInstallScript internal installScript)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --post-install-script-file OUTPUT_VARIABLE postScript) 

    if(postScript)
        if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${postScript})
            file(READ ${CMAKE_CURRENT_SOURCE_DIR}/${postScript} external)
            set(scriptContent "${external}\n${internal}")
        else()
            set(scriptContent "${internal}")
        endif()
    else()
        set(scriptContent "${internal}")
    endif()

    file(WRITE "${CMAKE_BINARY_DIR}/modulefiles/script" "${scriptContent}") 
    set(${installScript} "${CMAKE_BINARY_DIR}/modulefiles/script" PARENT_SCOPE)
#    if(postScript)
#        set(${installScript} "${CMAKE_CURRENT_SOURCE_DIR}/${postScript}" PARENT_SCOPE)
#    endif()
endfunction(PostInstallScript)

function(PreInstallScript installScript)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --pre-install-script-file OUTPUT_VARIABLE preScript) 

    if(preScript)
        if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${preScript})
            set(${installScript} "${CMAKE_CURRENT_SOURCE_DIR}/${preScript}" PARENT_SCOPE)
        endif()
    endif()
endfunction(PreInstallScript)

function(AutoDependencyCheck autoCheck)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --auto-dependency-check OUTPUT_VARIABLE check) 
    set(${autoCheck} ${check} PARENT_SCOPE)
endfunction(AutoDependencyCheck)

macro(IsModuleEnabled flag ModuleName)
    ListDirectory(${ModuleName} VersionList)
    foreach(v ${VersionList})
        if(Module_${ModuleName}_${v})
            set(${flag} true)
            break()
        else()
            set(${flag} false)
        endif()
    endforeach()
endmacro()

function(SetPath input fqpn output)

    # Using "~" to indicate installation path
    string(REGEX MATCH "^~" match ${input})
    if(match)
        string(REPLACE "~" "${fqpn}" fullPath ${input})
    else()
        set(fullPath "${input}")
    endif()

    set(${output} ${fullPath} PARENT_SCOPE)

endfunction(SetPath)

function(ModuleValidation output)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/validate_module.sh --single-test OUTPUT_VARIABLE sc) 
    set(${output} ${sc} PARENT_SCOPE)
endfunction(ModuleValidation)

function(SetCategory input output)
    string(TOUPPER ${input} category)
    set(${output} ${category} PARENT_SCOPE)
endfunction(SetCategory)

function(SetLicenseAgreement application version output)
    set(${output} "\$HOME/.vnc/.${application}-${version}-license-agreement" PARENT_SCOPE)
endfunction(SetLicenseAgreement)

function(SetCvlPath cvlPath)
    execute_process(COMMAND cvlpath.sh OUTPUT_VARIABLE output ERROR_VARIABLE error)
    if(error OR output STREQUAL "")
        set(cvlpath "/usr/local/cvl/1.0")
    else()
        set(cvlpath "${output}")
    endif()
    set(${cvlPath} ${cvlpath} PARENT_SCOPE)
endfunction(SetCvlPath)

function(SetRpmPackageRequires requires)
    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/config --rpm-package-requires OUTPUT_VARIABLE requiry) 

    if(requiry)
        set(${requires} "${requiry}" PARENT_SCOPE)
    endif()
endfunction(SetRpmPackageRequires)


include(CvlDefinition)

